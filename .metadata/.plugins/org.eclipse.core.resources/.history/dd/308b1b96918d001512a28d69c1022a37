package com.example.comp304_group1_microproject5;

import java.util.Random;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Paint.Style;
import android.graphics.PorterDuff.Mode;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

public class GraphicalGuessingGame extends Activity {

	final Context context = this;
	
	Random randNum = new Random();
	int num = randNum.nextInt(100) + 1;
	
	int guess;
	int score = 100;
	int chance = 10;
	TextView lblMessage;
	TextView tv;
	
	MediaPlayer mp;
	ProgressBar progress;
	TextView txtProgress;
	Button btnPause;
	
	int currentPosition;
	int length;	
	
	GraphicalGuessingGame self = this;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_graphical_guessing_game);
		
		mp = MediaPlayer.create(this, R.raw.gummybear);
//		progress = (ProgressBar) findViewById(R.id.pbProgress);	
		
		mp.setLooping(true);
		mp.start();
		
//		btnPause = (Button) findViewById(R.id.btnPause);
//        btnPause.setOnClickListener(new View.OnClickListener() {
//			
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//				if (mp.isPlaying()) {
//					mp.pause();
//					self.btnPause.setText("Play Song");
//				}
//				else {
//					mp.start();
//					self.btnPause.setText("Pause Song");
//				}
//					
//			}
//		});
        
		new Thread(new Runnable() {
            public void run() {
        	   	currentPosition = 0;
            	length = mp.getDuration();
            	
        		progress.setMax(length);
        		
            	while (mp != null && currentPosition < length) {
        			try {
        				Thread.sleep(1000);
        				currentPosition = mp.getCurrentPosition();
        			}
        			catch (Exception e) {
        				return;
        			}
        			progress.setProgress(currentPosition);
        		}
            }
        }).start();
		
//		TextView tv = (TextView)findViewById(R.id.lblSongLength);
//		tv.setText("Song Length: " + mp.getDuration() + "ms");
		
		
		final Paint paint = new Paint();
        final Bitmap bg = Bitmap.createBitmap(480, 700, Bitmap.Config.ARGB_8888);
        final Canvas can = new Canvas(bg);
        can.drawColor(Color.rgb(190, 207, 236));
	
        
        // BOX
        paint.setStyle(Style.FILL);
        paint.setColor(Color.BLACK);
        can.drawRect(150, 540, 350, 640, paint);
        
        LinearLayout l = (LinearLayout) findViewById(R.id.drawarea);
        l.setBackgroundDrawable(new BitmapDrawable(bg));
        
        TableLayout tab = (TableLayout)findViewById(R.id.tblGame);
        int curr = 1;
        for (int i= 1; i < 11; i++)
        {
        	TableRow tr = new TableRow(this);
        	for (int j = 1; j < 11; j++)
        	{
        		tv = new TextView(this);
        		tv.setText(String.valueOf(curr));
        		tv.setId(curr);
        		tv.setPadding(5, 0, 5, 0);
        		curr++;
        		tv.setOnClickListener(new OnClickListener() {
					
					@Override
					public void onClick(View v) {
						Toast t = Toast.makeText(v.getContext(), String.valueOf(v.getId()), Toast.LENGTH_SHORT);
						t.show();
						
						guess = v.getId();
						tv = (TextView) findViewById(v.getId());
						
						if (guess == num) {
//				    		mp.stop();
			        		tv.setBackgroundColor(Color.GREEN);
				        	showWinMessageBox();
				        }
				        else {     	
				        	score -= 10;
				        	chance--;
				        	drawHangMan(paint, bg, can);
				        	
				        	if (guess > num) {
				        		tv.setBackgroundColor(Color.RED);
				        	}
				        	else {
				        		tv.setBackgroundColor(Color.YELLOW);
				        	}
				        	
				        	TextView lblScore = (TextView) findViewById(R.id.lblScore);
				        	lblScore.setText("Score: " + score + "%");
				        	TextView lblChance = (TextView) findViewById(R.id.lblChance);
				        	lblChance.setText("Chances Left: " + chance);
				        }
						
						if (chance == 0) {
//				        	mp.stop();
				        	showLoseMessageBox();
				        }
					}
				});
        		tr.addView(tv);
        	}
        	tab.addView(tr);
        }
	}
    
 
        
        
        
        
		

	
	public OnClickListener ButtonClicked(TextView view)
	{
		Toast t = Toast.makeText(this, view.getText(), Toast.LENGTH_SHORT); 
		t.show();
		return null;	
	}

	private void drawHangMan(Paint paint, Bitmap bg, Canvas can) {
		if (chance == 9) {
			// HEAD
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawOval(new RectF(190, 20, 310, 160), paint);
	        paint.setColor(Color.WHITE);
	        can.drawOval(new RectF(210, 60, 240, 75), paint);
	        can.drawOval(new RectF(260, 60, 290, 75), paint);
	        can.drawOval(new RectF(243, 85, 257, 105), paint);
	        can.drawOval(new RectF(225, 115, 275, 135), paint);	
		} else if (chance == 8) {	        
	        // EARS
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawOval(new RectF(170, 65, 200, 115), paint);
	        can.drawOval(new RectF(300, 65, 330, 115), paint);
		} else if (chance == 7) {	        
	        // NECK
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawRect(240, 150, 260, 190, paint);
		} else if (chance == 6) {
	        // BODY
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawRect(220, 180, 280, 370, paint);
		} else if (chance == 5) {	        
	        // LEFT ARM
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path1 = new Path();
	        path1.reset();
	        path1.moveTo(220, 180);
	        path1.lineTo(115, 320);
	        path1.lineTo(125, 330);
	        path1.lineTo(230, 190);
	        
	        can.drawPath(path1, paint);
		} else if (chance == 4) {
	        // RIGHT ARM
			paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path2 = new Path();
	        path2.reset();
	        path2.moveTo(280, 180);
	        path2.lineTo(385, 320);
	        path2.lineTo(375, 330);
	        path2.lineTo(270, 190);
	        
	        can.drawPath(path2, paint);
		} else if (chance == 3) {
	        // LEFT LEG
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path3 = new Path();
	        path3.reset();
	        path3.moveTo(220, 370);
	        path3.lineTo(185, 540);
	        path3.lineTo(200, 540);
	        path3.lineTo(240, 360);
	        
	        can.drawPath(path3, paint);
		} else if (chance == 2) {
			// RIGHT LEG
			paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path4 = new Path();
	        path4.reset();
	        path4.moveTo(280, 370);
	        path4.lineTo(315, 540);
	        path4.lineTo(300, 540);
	        path4.lineTo(260, 360);
	        
	        can.drawPath(path4, paint);
		} else if (chance == 1) {
			// ROPE
	        paint.setStyle(Style.STROKE);
	        paint.setStrokeWidth(5);
	        paint.setColor(Color.RED);
	        
	        Path path5 = new Path();
	        path5.reset();
	        path5.arcTo(new RectF(100, 100, 400, 170), 0, 180);
	        
	        can.drawPath(path5, paint);
		} else {
			can.drawColor(0, Mode.CLEAR);
			
			// REDRAW ON CANVAS
			// HEAD
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawOval(new RectF(190, 20, 310, 160), paint);
	        paint.setColor(Color.RED);
	        can.drawOval(new RectF(210, 60, 240, 75), paint);
	        can.drawOval(new RectF(260, 60, 290, 75), paint);
	        paint.setColor(Color.WHITE);
	        can.drawOval(new RectF(243, 85, 257, 105), paint);
	        can.drawOval(new RectF(225, 115, 275, 135), paint);	

	        // EARS
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawOval(new RectF(170, 65, 200, 115), paint);
	        can.drawOval(new RectF(300, 65, 330, 115), paint);

	        // NECK
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawRect(240, 150, 260, 190, paint);

	        // BODY
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        can.drawRect(220, 180, 280, 370, paint);

	        // LEFT ARM
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path1 = new Path();
	        path1.reset();
	        path1.moveTo(220, 180);
	        path1.lineTo(115, 320);
	        path1.lineTo(125, 330);
	        path1.lineTo(230, 190);
	        
	        can.drawPath(path1, paint);

	        // RIGHT ARM
			paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path2 = new Path();
	        path2.reset();
	        path2.moveTo(280, 180);
	        path2.lineTo(385, 320);
	        path2.lineTo(375, 330);
	        path2.lineTo(270, 190);
	        
	        can.drawPath(path2, paint);

	        // LEFT LEG
	        paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path3 = new Path();
	        path3.reset();
	        path3.moveTo(220, 370);
	        path3.lineTo(185, 540);
	        path3.lineTo(200, 540);
	        path3.lineTo(240, 360);
	        
	        can.drawPath(path3, paint);

	        // RIGHT LEG
			paint.setStyle(Style.FILL);
	        paint.setColor(Color.GRAY);
	        
	        Path path4 = new Path();
	        path4.reset();
	        path4.moveTo(280, 370);
	        path4.lineTo(315, 540);
	        path4.lineTo(300, 540);
	        path4.lineTo(260, 360);
	        
	        can.drawPath(path4, paint);

	        // ROPE
	        paint.setStyle(Style.STROKE);
	        paint.setStrokeWidth(5);
	        paint.setColor(Color.RED);
	        
	        Path path5 = new Path();
	        path5.reset();
	        path5.arcTo(new RectF(100, 100, 400, 170), 0, 180);
	        
	        can.drawPath(path5, paint);
		}
		
		LinearLayout l = (LinearLayout) findViewById(R.id.drawarea);
        l.setBackgroundDrawable(new BitmapDrawable(bg));
		
	}
	
	private void showWinMessageBox() {
    	AlertDialog.Builder builder = new AlertDialog.Builder(context);
    	builder.setTitle("Guessing Game");
    	builder.setMessage("Congratulations! You won with a score of " + score + "%!");
    	builder.setCancelable(false);
    	
    	builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(GraphicalGuessingGame.this, MainGraphicalGuessingGame.class);
				startActivity(intent);
	        	
			}
		});
    	
    	AlertDialog dialog = builder.create();
    	dialog.show();
    	
    }

	private void showLoseMessageBox() {
    	AlertDialog.Builder builder = new AlertDialog.Builder(context);
    	builder.setTitle("Guessing Game");
    	builder.setMessage("Game Over!");
    	builder.setCancelable(false);
    	
    	builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(GraphicalGuessingGame.this, MainGraphicalGuessingGame.class);
				startActivity(intent);
	        	
			}
		});
    	
    	AlertDialog dialog = builder.create();
    	dialog.show();
    	
    }
	
//	@Override
//	protected void onPause() { 
//		super.onPause(); 
//		mp.stop(); 
//		Intent intent = new Intent(GGPlayMusicProgressBar.this, MainGGPlayMusicProgressBar.class);
//		startActivity(intent);
//	}
//	
//	public void songClick(View view)
//	{
//		mp.stop();
//		progress = (ProgressBar) findViewById(R.id.pbProgress);
//		progress.setProgress(0);
//
//		if (view.getId() == R.id.rbtnGummy)
//		{
//			mp = MediaPlayer.create(this, R.raw.gummybear);
//		}
//		else if (view.getId() == R.id.rbtnLetItGo)
//		{
//			mp = MediaPlayer.create(this, R.raw.letitgo);
//		}
//
//		mp.setLooping(true);
//		mp.start();
//		btnPause.setText("Pause Song");
//		
//		new Thread(new Runnable() {
//            public void run() {
//            	currentPosition = 0;
//            	length = mp.getDuration();
//        		
//        		progress.setMax(length);
//        		
//            	while (mp != null && currentPosition < length) {
//        			try {
//        				Thread.sleep(1000);
//        				currentPosition = mp.getCurrentPosition();	
//        			}
//        			catch (Exception e) {
//        				return;
//        			}
//		 			progress.setProgress(currentPosition);
//        		}
//            }
//        }).start();
//	
//		TextView tv = (TextView)findViewById(R.id.lblSongLength);
//		tv.setText("Song Length: " + mp.getDuration() + "ms");
//	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.graphical_guessing_game, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
}


